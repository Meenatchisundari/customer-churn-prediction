name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black isort flake8
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Treat all errors as warnings. The GitHub editor is 127 chars wide
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check src/
    
    - name: Check import sorting with isort
      run: |
        isort --check-only src/
    
    - name: Run tests with pytest
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan with bandit
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: bandit-results
        path: bandit-report.json

  build-and-validate:
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test model training pipeline
      run: |
        # This would run a quick model training test
        python -c "
        import sys
        sys.path.append('src')
        from data_preprocessing import ChurnDataPreprocessor
        from model import ChurnPredictionModel
        print('âœ“ All imports successful')
        print('âœ“ Model pipeline validation passed')
        "
    
    - name: Validate data preprocessing
      run: |
        python -c "
        import sys
        sys.path.append('src')
        from config import MODEL_CONFIG, TRAINING_CONFIG
        print('âœ“ Configuration files valid')
        "

  docker-build:
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./deployment
        file: ./deployment/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/churn-prediction:latest
          ${{ secrets.DOCKER_USERNAME }}/churn-prediction:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo " Deploying to staging environment"
        # Add your deployment commands here
        # Example: kubectl apply -f k8s/staging/
    
    - name: Run integration tests
      run: |
        echo " Running integration tests"
        # Add integration test commands here
    
    - name: Health check
      run: |
        echo " Performing health check"
        # Add health check commands here

  deploy-production:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo " Deploying to production environment"
        # Add your production deployment commands here
    
    - name: Post-deployment verification
      run: |
        echo " Verifying production deployment"
        # Add verification commands here

  model-monitoring:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run model performance monitoring
      run: |
        echo " Checking model performance metrics"
        # Add model monitoring scripts here
        # python scripts/monitor_model_performance.py
    
    - name: Check data drift
      run: |
        echo "ðŸ“ˆ Checking for data drift"
        # Add data drift detection scripts here
        # python scripts/detect_data_drift.py
    
    - name: Generate monitoring report
      run: |
        echo " Generating monitoring report"
        # Add report generation scripts here

  notify:
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan, build-and-validate]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.lint-and-test.result == 'success' && needs.build-and-validate.result == 'success' }}
      run: |
        echo " All checks passed successfully!"
    
    - name: Notify on failure
      if: ${{ needs.lint-and-test.result == 'failure' || needs.build-and-validate.result == 'failure' }}
      run: |
        echo " Some checks failed. Please review the logs."
